#!/usr/local/bin/bash

# clear scrollback
cs() {
  echo -ne "\x1Bc\x1b[3J" && clear
}

# trap cs EXIT

getInput() {
  INPUT=""

  # get user input
  [[ ${#*} -lt 1 ]] &&
    while [[ ${#INPUT} -lt 1 ]]; do
      read -p "Search: " INPUT
    done ||
    INPUT="${@}"

  # escape spaces with '+'
  INPUT="$(echo ${INPUT} | tr ' ' '+')"

  # filter by category
  read -p "(Optional):filter (Amp, Pedal, IR): " FILTER
  [[ ${#FILTER} -lt 1 ]] && FILTER="" || FILTER="&filter=${FILTER}"
}

getInput "${@}"

searchToneHunt() {
  # echo -e "\x1b[2KSearching..."

  # get HTML
  PAGE=${1}
  BASE="https://tonehunt.org"
  URL="${BASE}/search-results?search=${INPUT}${FILTER}&page=${PAGE}"
  RESULTS=$(curl "${URL}" -s)

  # number of pages
  PAGES=$(echo "${RESULTS}" | pup --color 'ul[aria-label=Pagination] li:nth-last-child(2) text{}')
  [[ "${#PAGES}" -eq 0 ]] && PAGES=1

  # result titles
  # (quote array to prevent splitting)
  declare -a LIST="($(
    echo "${RESULTS}" |
      pup --color 'h3.font-satoshi-bold json{}' |
      jq '.[] .title'
  ))"

  # result urls
  declare -a LINKS="($(
    echo "${RESULTS}" |
      pup '.bg-tonehunt-gray-medium a.flex-1[href] json{}' |
      jq '.[].href'
  ))"

  # exit if nothing found
  [[ ${#LIST[@]} -eq 0 ]] &&
    echo -e "\nNo results\n" &&
    exit 0

  # render scrollable list of results
  # opens selected url in browser
  renderUI() {
    local pos=0
    local len=0

    # utils
    cursorUp() { echo -ne "\x1b[1A\r"; }
    cursorDown() { echo -ne "\x1b[1B\r"; }
    cursorTop() { tput cup 0 0; }
    cursorBottom() { tput cup $((LINES - 4)); }
    boldText() { echo -ne "\x1b[1m${@}\x1b[0m\r"; }
    printListItem() { ${@} "$((pos + 1)): ${LIST[pos]} ($(echo -ne "${LINKS[pos]}" | cut -f 2 -d '/'))\r"; }

    # render the list
    cs
    cursorBottom
    echo -e "\nPage $((${PAGE} + 1)) of ${PAGES}\n(N):next (P):prev (Q):quit (S):new (I):info (Up/Down):move (Enter):open"
    cursorTop

    for i in "${!LIST[@]}"; do
      # change pos to ${i} so correct link/username combo is rendered
      pos=${i}
      printListItem echo -e
      ((len += 1))
    done

    # reset pos
    pos=0
    cursorTop
    printListItem boldText

    # listen for keypresses
    while true; do
      read -r -sn1 keypress

      case ${keypress} in

      # select prev item (up)
      "A")
        if [[ pos -gt 0 ]]; then
          # move up/highlight previous selection in list
          printListItem echo -ne
          ((pos -= 1))
          cursorUp
        else
          # loop to bottom if at start of list
          printListItem echo -ne
          pos=$((len - 1))
          tput cup $((len - 1)) 0
        fi

        printListItem boldText
        ;;

      # select next item (down)
      "B")
        if [[ pos -lt $((len - 1)) ]]; then
          # move down/highlight next selection in list
          printListItem echo -ne
          ((pos += 1))
          cursorDown
        else
          # loop to top if at end of list
          printListItem echo -ne
          pos=0
          cursorTop
        fi

        printListItem boldText
        ;;

      # open selected URL and exit (enter)
      "")
        cursorBottom
        cs
        echo -e "${LIST[pos]} - ${BASE}${LINKS[pos]}"
        open "${BASE}${LINKS[pos]}"
        break
        ;;

      # show description
      "i")
        tput smcup
        echo -e "$(boldText "${LIST[pos]}")\n\n$(curl -s "${BASE}${LINKS[pos]}" | pup ':contains("Description") + p text{}')\n"
        cursorBottom
        echo
        read -p "press ENTER to go back"
        tput rmcup
        ;;

      # show next page
      "n")
        if [[ $((PAGE + 1)) -lt ${PAGES} ]]; then
          cursorBottom
          echo -e "\nLoading next page\n"
          cursorTop
          searchToneHunt $((PAGE + 1))
          break
        else
          cursorBottom
          echo -e "\nAlready at last page\n"
          cursorTop
        fi
        ;;

      # show prev page
      "p")
        if [[ ${PAGE} -gt 0 ]]; then
          cursorBottom
          echo -e "\nLoading previous page\n"
          cursorTop
          searchToneHunt $((PAGE - 1))
          break
        else
          cursorBottom
          echo -e "\nAlready at first page\n"
          cursorTop
        fi
        ;;

      # quit
      "q")
        cs
        break
        ;;

      # new search
      "s")
        INPUT=""
        cursorBottom
        getInput
        searchToneHunt 0
        break
        ;;
      esac
    done
  }

  renderUI
}

searchToneHunt 0

# TODO: tags
# https://tonehunt.org/all?filter=ir&tags=metal
